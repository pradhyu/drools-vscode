{
  "Basic Rule": {
    "prefix": "rule",
    "body": [
      "rule \"${1:RuleName}\"",
      "when",
      "\t${2:// Add conditions here}",
      "then",
      "\t${3:// Add actions here}",
      "end"
    ],
    "description": "Basic Drools rule template"
  },
  
  "Rule with Salience": {
    "prefix": "rule-salience",
    "body": [
      "rule \"${1:RuleName}\"",
      "\tsalience ${2:100}",
      "when",
      "\t${3:// Add conditions here}",
      "then",
      "\t${4:// Add actions here}",
      "end"
    ],
    "description": "Drools rule with salience attribute"
  },
  
  "Conditional Rule": {
    "prefix": "rule-condition",
    "body": [
      "rule \"${1:RuleName}\"",
      "when",
      "\t${2:FactType}(${3:property} ${4|==,!=,>,<,>=,<=|} ${5:value})",
      "then",
      "\t${6:// Add actions here}",
      "end"
    ],
    "description": "Rule with conditional pattern matching"
  },
  
  "Rule with Multiple Conditions": {
    "prefix": "rule-multi",
    "body": [
      "rule \"${1:RuleName}\"",
      "when",
      "\t${2:FactType1}(${3:property1} ${4|==,!=,>,<,>=,<=|} ${5:value1})",
      "\t${6:FactType2}(${7:property2} ${8|==,!=,>,<,>=,<=|} ${9:value2})",
      "then",
      "\t${10:// Add actions here}",
      "end"
    ],
    "description": "Rule with multiple conditions"
  },
  
  "Rule with Variable Binding": {
    "prefix": "rule-bind",
    "body": [
      "rule \"${1:RuleName}\"",
      "when",
      "\t$${2:var} : ${3:FactType}(${4:property} ${5|==,!=,>,<,>=,<=|} ${6:value})",
      "then",
      "\t${7:// Use $}${2:var}${7: in actions}",
      "end"
    ],
    "description": "Rule with variable binding"
  },
  
  "Rule with Exists": {
    "prefix": "rule-exists",
    "body": [
      "rule \"${1:RuleName}\"",
      "when",
      "\texists(${2:FactType}(${3:property} ${4|==,!=,>,<,>=,<=|} ${5:value}))",
      "then",
      "\t${6:// Add actions here}",
      "end"
    ],
    "description": "Rule with exists condition"
  },
  
  "Rule with Not": {
    "prefix": "rule-not",
    "body": [
      "rule \"${1:RuleName}\"",
      "when",
      "\tnot(${2:FactType}(${3:property} ${4|==,!=,>,<,>=,<=|} ${5:value}))",
      "then",
      "\t${6:// Add actions here}",
      "end"
    ],
    "description": "Rule with not condition"
  },
  
  "Function Definition": {
    "prefix": "function",
    "body": [
      "function ${1:returnType} ${2:functionName}(${3:parameters}) {",
      "\t${4:// Function body}",
      "\treturn ${5:value};",
      "}"
    ],
    "description": "Drools function definition"
  },
  
  "Function with No Return": {
    "prefix": "function-void",
    "body": [
      "function void ${1:functionName}(${2:parameters}) {",
      "\t${3:// Function body}",
      "}"
    ],
    "description": "Void function definition"
  },
  
  "Package Declaration": {
    "prefix": "package",
    "body": [
      "package ${1:com.example.rules};"
    ],
    "description": "Package declaration"
  },
  
  "Import Statement": {
    "prefix": "import",
    "body": [
      "import ${1:com.example.FactType};"
    ],
    "description": "Import statement"
  },
  
  "Import Function": {
    "prefix": "import-function",
    "body": [
      "import function ${1:com.example.Utils.functionName};"
    ],
    "description": "Import function statement"
  },
  
  "Global Declaration": {
    "prefix": "global",
    "body": [
      "global ${1:Type} ${2:variableName};"
    ],
    "description": "Global variable declaration"
  },
  
  "Query Definition": {
    "prefix": "query",
    "body": [
      "query ${1:queryName}(${2:parameters})",
      "\t${3:// Query conditions}",
      "end"
    ],
    "description": "Query definition"
  },
  
  "Rule with Eval": {
    "prefix": "rule-eval",
    "body": [
      "rule \"${1:RuleName}\"",
      "when",
      "\teval(${2:condition})",
      "then",
      "\t${3:// Add actions here}",
      "end"
    ],
    "description": "Rule with eval condition"
  },
  
  "Rule with Accumulate": {
    "prefix": "rule-accumulate",
    "body": [
      "rule \"${1:RuleName}\"",
      "when",
      "\t$${2:result} : ${3:Number}() from accumulate(",
      "\t\t$${4:item} : ${5:FactType}(${6:condition}),",
      "\t\t${7|sum,count,min,max,average|}($${4:item}.${8:property})",
      "\t)",
      "then",
      "\t${9:// Use $}${2:result}${9: in actions}",
      "end"
    ],
    "description": "Rule with accumulate function"
  },
  
  "Rule with Collect": {
    "prefix": "rule-collect",
    "body": [
      "rule \"${1:RuleName}\"",
      "when",
      "\t$${2:list} : List() from collect(",
      "\t\t${3:FactType}(${4:condition})",
      "\t)",
      "then",
      "\t${5:// Use $}${2:list}${5: in actions}",
      "end"
    ],
    "description": "Rule with collect function"
  },
  
  "Insert Action": {
    "prefix": "insert",
    "body": [
      "insert(new ${1:FactType}(${2:parameters}));"
    ],
    "description": "Insert action"
  },
  
  "Update Action": {
    "prefix": "update",
    "body": [
      "update($${1:variable});"
    ],
    "description": "Update action"
  },
  
  "Modify Action": {
    "prefix": "modify",
    "body": [
      "modify($${1:variable}) {",
      "\t${2:property} = ${3:value}",
      "}"
    ],
    "description": "Modify action"
  },
  
  "Retract Action": {
    "prefix": "retract",
    "body": [
      "retract($${1:variable});"
    ],
    "description": "Retract action"
  },
  
  "Complete Rule File": {
    "prefix": "drl-file",
    "body": [
      "package ${1:com.example.rules};",
      "",
      "import ${2:com.example.FactType};",
      "",
      "rule \"${3:RuleName}\"",
      "when",
      "\t${4:// Add conditions here}",
      "then",
      "\t${5:// Add actions here}",
      "end"
    ],
    "description": "Complete .drl file template"
  },

  "// === JAVA RHS SNIPPETS FOR THEN CLAUSE ===": {},

  "System Print": {
    "prefix": "sysout",
    "body": [
      "System.out.println(${1:\"Message: \" + ${2:variable}});"
    ],
    "description": "System.out.println statement"
  },

  "System Print Format": {
    "prefix": "syspf",
    "body": [
      "System.out.printf(\"${1:%s}: ${2:%d}%n\", ${3:variable1}, ${4:variable2});"
    ],
    "description": "System.out.printf statement"
  },

  "Logger Info": {
    "prefix": "loginfo",
    "body": [
      "logger.info(\"${1:Rule fired}: ${2:{}}\", ${3:variable});"
    ],
    "description": "Logger info statement"
  },

  "Logger Debug": {
    "prefix": "logdebug",
    "body": [
      "logger.debug(\"${1:Debug message}: ${2:{}}\", ${3:variable});"
    ],
    "description": "Logger debug statement"
  },

  "Logger Error": {
    "prefix": "logerror",
    "body": [
      "logger.error(\"${1:Error occurred}: ${2:{}}\", ${3:variable});"
    ],
    "description": "Logger error statement"
  },

  "Set Property": {
    "prefix": "setprop",
    "body": [
      "${1:object}.set${2:Property}(${3:value});"
    ],
    "description": "Set object property"
  },

  "Get Property": {
    "prefix": "getprop",
    "body": [
      "${1:Type} ${2:value} = ${3:object}.get${4:Property}();"
    ],
    "description": "Get object property"
  },

  "Create New Object": {
    "prefix": "newobj",
    "body": [
      "${1:Type} ${2:variable} = new ${1:Type}(${3:parameters});"
    ],
    "description": "Create new object instance"
  },

  "String Concatenation": {
    "prefix": "strcat",
    "body": [
      "String ${1:result} = ${2:string1} + \" \" + ${3:string2};"
    ],
    "description": "String concatenation"
  },

  "String Format": {
    "prefix": "strfmt",
    "body": [
      "String ${1:result} = String.format(\"${2:%s %d}\", ${3:string}, ${4:number});"
    ],
    "description": "String formatting"
  },

  "String Builder": {
    "prefix": "strbld",
    "body": [
      "StringBuilder ${1:sb} = new StringBuilder();",
      "${1:sb}.append(${2:\"text\"});",
      "String ${3:result} = ${1:sb}.toString();"
    ],
    "description": "StringBuilder usage"
  },

  "If Statement": {
    "prefix": "if",
    "body": [
      "if (${1:condition}) {",
      "\t${2:// statements}",
      "}"
    ],
    "description": "If statement"
  },

  "If Else Statement": {
    "prefix": "ifelse",
    "body": [
      "if (${1:condition}) {",
      "\t${2:// if statements}",
      "} else {",
      "\t${3:// else statements}",
      "}"
    ],
    "description": "If-else statement"
  },

  "Switch Statement": {
    "prefix": "switch",
    "body": [
      "switch (${1:variable}) {",
      "\tcase ${2:value1}:",
      "\t\t${3:// statements}",
      "\t\tbreak;",
      "\tcase ${4:value2}:",
      "\t\t${5:// statements}",
      "\t\tbreak;",
      "\tdefault:",
      "\t\t${6:// default statements}",
      "\t\tbreak;",
      "}"
    ],
    "description": "Switch statement"
  },

  "For Loop": {
    "prefix": "for",
    "body": [
      "for (int ${1:i} = 0; ${1:i} < ${2:length}; ${1:i}++) {",
      "\t${3:// statements}",
      "}"
    ],
    "description": "For loop"
  },

  "Enhanced For Loop": {
    "prefix": "foreach",
    "body": [
      "for (${1:Type} ${2:item} : ${3:collection}) {",
      "\t${4:// statements}",
      "}"
    ],
    "description": "Enhanced for loop (foreach)"
  },

  "While Loop": {
    "prefix": "while",
    "body": [
      "while (${1:condition}) {",
      "\t${2:// statements}",
      "}"
    ],
    "description": "While loop"
  },

  "Try Catch": {
    "prefix": "try",
    "body": [
      "try {",
      "\t${1:// statements}",
      "} catch (${2:Exception} ${3:e}) {",
      "\t${4:logger.error(\"Error: \", e);}",
      "}"
    ],
    "description": "Try-catch block"
  },

  "Try Catch Finally": {
    "prefix": "tryfinally",
    "body": [
      "try {",
      "\t${1:// statements}",
      "} catch (${2:Exception} ${3:e}) {",
      "\t${4:logger.error(\"Error: \", e);}",
      "} finally {",
      "\t${5:// cleanup}",
      "}"
    ],
    "description": "Try-catch-finally block"
  },

  "ArrayList Creation": {
    "prefix": "arraylist",
    "body": [
      "List<${1:Type}> ${2:list} = new ArrayList<>();"
    ],
    "description": "Create ArrayList"
  },

  "HashMap Creation": {
    "prefix": "hashmap",
    "body": [
      "Map<${1:KeyType}, ${2:ValueType}> ${3:map} = new HashMap<>();"
    ],
    "description": "Create HashMap"
  },

  "List Add": {
    "prefix": "listadd",
    "body": [
      "${1:list}.add(${2:item});"
    ],
    "description": "Add item to list"
  },

  "List Remove": {
    "prefix": "listrem",
    "body": [
      "${1:list}.remove(${2:item});"
    ],
    "description": "Remove item from list"
  },

  "List Contains": {
    "prefix": "listcon",
    "body": [
      "if (${1:list}.contains(${2:item})) {",
      "\t${3:// statements}",
      "}"
    ],
    "description": "Check if list contains item"
  },

  "List Size": {
    "prefix": "listsize",
    "body": [
      "int ${1:size} = ${2:list}.size();"
    ],
    "description": "Get list size"
  },

  "Map Put": {
    "prefix": "mapput",
    "body": [
      "${1:map}.put(${2:key}, ${3:value});"
    ],
    "description": "Put value in map"
  },

  "Map Get": {
    "prefix": "mapget",
    "body": [
      "${1:Type} ${2:value} = ${3:map}.get(${4:key});"
    ],
    "description": "Get value from map"
  },

  "Map Contains Key": {
    "prefix": "mapkey",
    "body": [
      "if (${1:map}.containsKey(${2:key})) {",
      "\t${3:// statements}",
      "}"
    ],
    "description": "Check if map contains key"
  },

  "Date Now": {
    "prefix": "datenow",
    "body": [
      "Date ${1:now} = new Date();"
    ],
    "description": "Create current date"
  },

  "LocalDateTime Now": {
    "prefix": "ldtnow",
    "body": [
      "LocalDateTime ${1:now} = LocalDateTime.now();"
    ],
    "description": "Create current LocalDateTime"
  },

  "Date Format": {
    "prefix": "datefmt",
    "body": [
      "SimpleDateFormat ${1:formatter} = new SimpleDateFormat(\"${2:yyyy-MM-dd HH:mm:ss}\");",
      "String ${3:formatted} = ${1:formatter}.format(${4:date});"
    ],
    "description": "Format date to string"
  },

  "Math Operations": {
    "prefix": "mathop",
    "body": [
      "${1:double} ${2:result} = Math.${3|abs,max,min,round,ceil,floor,sqrt,pow|}(${4:value});"
    ],
    "description": "Math operations"
  },

  "Random Number": {
    "prefix": "random",
    "body": [
      "Random ${1:random} = new Random();",
      "int ${2:number} = ${1:random}.nextInt(${3:bound});"
    ],
    "description": "Generate random number"
  },

  "UUID Generation": {
    "prefix": "uuid",
    "body": [
      "String ${1:uuid} = UUID.randomUUID().toString();"
    ],
    "description": "Generate UUID"
  },

  "Null Check": {
    "prefix": "nullcheck",
    "body": [
      "if (${1:object} != null) {",
      "\t${2:// statements}",
      "}"
    ],
    "description": "Null check"
  },

  "Not Null Check": {
    "prefix": "notnull",
    "body": [
      "if (${1:object} == null) {",
      "\t${2:// handle null case}",
      "\treturn;",
      "}"
    ],
    "description": "Not null check with early return"
  },

  "String Empty Check": {
    "prefix": "strempty",
    "body": [
      "if (${1:string} != null && !${1:string}.isEmpty()) {",
      "\t${2:// statements}",
      "}"
    ],
    "description": "String empty check"
  },

  "String Blank Check": {
    "prefix": "strblank",
    "body": [
      "if (${1:string} != null && !${1:string}.trim().isEmpty()) {",
      "\t${2:// statements}",
      "}"
    ],
    "description": "String blank check"
  },

  "Number Comparison": {
    "prefix": "numcmp",
    "body": [
      "if (${1:number1}.compareTo(${2:number2}) ${3|>,<,==,>=,<=,!=|} 0) {",
      "\t${4:// statements}",
      "}"
    ],
    "description": "Number comparison"
  },

  "BigDecimal Creation": {
    "prefix": "bigdec",
    "body": [
      "BigDecimal ${1:value} = new BigDecimal(\"${2:0.00}\");"
    ],
    "description": "Create BigDecimal"
  },

  "BigDecimal Add": {
    "prefix": "bigadd",
    "body": [
      "BigDecimal ${1:result} = ${2:value1}.add(${3:value2});"
    ],
    "description": "BigDecimal addition"
  },

  "BigDecimal Multiply": {
    "prefix": "bigmul",
    "body": [
      "BigDecimal ${1:result} = ${2:value1}.multiply(${3:value2});"
    ],
    "description": "BigDecimal multiplication"
  },

  "Stream Filter": {
    "prefix": "streamflt",
    "body": [
      "List<${1:Type}> ${2:filtered} = ${3:list}.stream()",
      "\t.filter(${4:item} -> ${5:condition})",
      "\t.collect(Collectors.toList());"
    ],
    "description": "Stream filter operation"
  },

  "Stream Map": {
    "prefix": "streammap",
    "body": [
      "List<${1:ResultType}> ${2:mapped} = ${3:list}.stream()",
      "\t.map(${4:item} -> ${5:transformation})",
      "\t.collect(Collectors.toList());"
    ],
    "description": "Stream map operation"
  },

  "Stream Reduce": {
    "prefix": "streamred",
    "body": [
      "${1:Type} ${2:result} = ${3:list}.stream()",
      "\t.reduce(${4:identity}, (${5:a}, ${6:b}) -> ${7:operation});"
    ],
    "description": "Stream reduce operation"
  },

  "Optional Handling": {
    "prefix": "optional",
    "body": [
      "Optional<${1:Type}> ${2:optional} = ${3:getValue()};",
      "if (${2:optional}.isPresent()) {",
      "\t${1:Type} ${4:value} = ${2:optional}.get();",
      "\t${5:// use value}",
      "}"
    ],
    "description": "Optional handling"
  },

  "Optional OrElse": {
    "prefix": "optorelse",
    "body": [
      "${1:Type} ${2:value} = ${3:optional}.orElse(${4:defaultValue});"
    ],
    "description": "Optional orElse"
  },

  "Method Call": {
    "prefix": "methodcall",
    "body": [
      "${1:object}.${2:methodName}(${3:parameters});"
    ],
    "description": "Method call"
  },

  "Static Method Call": {
    "prefix": "staticcall",
    "body": [
      "${1:ClassName}.${2:methodName}(${3:parameters});"
    ],
    "description": "Static method call"
  },

  "Variable Declaration": {
    "prefix": "vardecl",
    "body": [
      "${1:Type} ${2:variable} = ${3:value};"
    ],
    "description": "Variable declaration"
  },

  "Final Variable": {
    "prefix": "finalvar",
    "body": [
      "final ${1:Type} ${2:variable} = ${3:value};"
    ],
    "description": "Final variable declaration"
  },

  "Ternary Operator": {
    "prefix": "ternary",
    "body": [
      "${1:Type} ${2:result} = ${3:condition} ? ${4:trueValue} : ${5:falseValue};"
    ],
    "description": "Ternary operator"
  },

  "Enum Value": {
    "prefix": "enumval",
    "body": [
      "${1:EnumType}.${2:VALUE}"
    ],
    "description": "Enum value reference"
  },

  "Enum Switch": {
    "prefix": "enumswitch",
    "body": [
      "switch (${1:enumVariable}) {",
      "\tcase ${2:VALUE1}:",
      "\t\t${3:// statements}",
      "\t\tbreak;",
      "\tcase ${4:VALUE2}:",
      "\t\t${5:// statements}",
      "\t\tbreak;",
      "\tdefault:",
      "\t\t${6:// default case}",
      "\t\tbreak;",
      "}"
    ],
    "description": "Switch statement with enum"
  },

  "Business Logic Pattern": {
    "prefix": "bizlogic",
    "body": [
      "// Business logic: ${1:description}",
      "if (${2:businessCondition}) {",
      "\t${3:object}.set${4:Status}(\"${5:NEW_STATUS}\");",
      "\t${3:object}.set${6:UpdatedDate}(new Date());",
      "\tupdate(${3:object});",
      "\tlogger.info(\"${7:Business action completed for}: {}\", ${3:object}.getId());",
      "}"
    ],
    "description": "Common business logic pattern"
  },

  "Validation Pattern": {
    "prefix": "validate",
    "body": [
      "// Validation: ${1:description}",
      "if (${2:validationCondition}) {",
      "\t${3:object}.addError(\"${4:error.message}\");",
      "\tlogger.warn(\"Validation failed for {}: ${4:error.message}\", ${3:object}.getId());",
      "} else {",
      "\t${3:object}.setValid(true);",
      "\tupdate(${3:object});",
      "}"
    ],
    "description": "Validation pattern"
  },

  "Audit Trail": {
    "prefix": "audit",
    "body": [
      "// Audit trail",
      "AuditLog ${1:audit} = new AuditLog();",
      "${1:audit}.setAction(\"${2:ACTION_NAME}\");",
      "${1:audit}.setEntityId(${3:object}.getId());",
      "${1:audit}.setUserId(${4:userId});",
      "${1:audit}.setTimestamp(new Date());",
      "${1:audit}.setDetails(\"${5:Action details}\");",
      "insert(${1:audit});"
    ],
    "description": "Audit trail creation"
  },

  "Notification Pattern": {
    "prefix": "notify",
    "body": [
      "// Send notification",
      "Notification ${1:notification} = new Notification();",
      "${1:notification}.setRecipient(${2:recipient});",
      "${1:notification}.setSubject(\"${3:Subject}\");",
      "${1:notification}.setMessage(\"${4:Message}\");",
      "${1:notification}.setType(NotificationType.${5|EMAIL,SMS,PUSH|});",
      "${1:notification}.setCreatedDate(new Date());",
      "insert(${1:notification});"
    ],
    "description": "Notification creation pattern"
  },

  "State Machine": {
    "prefix": "statemachine",
    "body": [
      "// State transition: ${1:description}",
      "String ${2:currentState} = ${3:object}.getState();",
      "String ${4:newState} = null;",
      "",
      "switch (${2:currentState}) {",
      "\tcase \"${5:INITIAL}\":",
      "\t\t${4:newState} = \"${6:PROCESSING}\";",
      "\t\tbreak;",
      "\tcase \"${6:PROCESSING}\":",
      "\t\t${4:newState} = \"${7:COMPLETED}\";",
      "\t\tbreak;",
      "\tdefault:",
      "\t\tlogger.warn(\"Invalid state transition from: {}\", ${2:currentState});",
      "\t\treturn;",
      "}",
      "",
      "${3:object}.setState(${4:newState});",
      "${3:object}.setLastModified(new Date());",
      "update(${3:object});"
    ],
    "description": "State machine pattern"
  },

  "Calculation Pattern": {
    "prefix": "calculate",
    "body": [
      "// Calculate ${1:description}",
      "BigDecimal ${2:result} = BigDecimal.ZERO;",
      "",
      "for (${3:ItemType} ${4:item} : ${5:items}) {",
      "\tBigDecimal ${6:itemValue} = ${4:item}.get${7:Amount}();",
      "\tif (${6:itemValue} != null) {",
      "\t\t${2:result} = ${2:result}.add(${6:itemValue});",
      "\t}",
      "}",
      "",
      "${8:object}.set${9:Total}(${2:result});",
      "update(${8:object});"
    ],
    "description": "Calculation pattern with BigDecimal"
  }
}