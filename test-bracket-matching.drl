package com.example.rules;

import java.util.List;
import java.util.Map;
import java.util.Set;

global java.util.List globalList;

/*
 * Multi-line block comment
 * with various brackets: () [] {}
 */

// Function with nested brackets
function String processData(String input, Map<String, Object> data) {
    if (input != null && data.containsKey("key")) {
        List<String> items = (List<String>) data.get("items");
        return items.stream()
            .filter(item -> item.length() > 0)
            .map(item -> item.toUpperCase())
            .collect(Collectors.toList())
            .toString();
    }
    return "default";
}

rule "Bracket Matching Test Rule"
    salience 100
    no-loop true
when
    $person : Person(
        age > 18,
        name != null,
        addresses.size() > 0
    )
    $account : Account(
        owner == $person,
        balance > 1000,
        type in ("CHECKING", "SAVINGS")
    )
    exists(
        Transaction(
            account == $account,
            amount > 500,
            date after "01-Jan-2023"
        )
    )
then
    // Nested brackets in actions
    Map<String, Object> data = new HashMap<>();
    data.put("customer", $person.getName());
    data.put("balance", $account.getBalance());
    
    List<String> notifications = Arrays.asList(
        "Account activated",
        "Welcome bonus applied"
    );
    
    for (String notification : notifications) {
        insert(new Notification($person, notification));
    }
    
    // Complex nested structure
    if ($account.getType().equals("PREMIUM")) {
        $person.getBenefits().add(
            new Benefit(
                "PREMIUM_ACCESS",
                calculateBenefitValue($account.getBalance())
            )
        );
    }
end

rule "Nested Conditions Rule"
when
    $customer : Customer(
        status == "ACTIVE",
        (age >= 21 && creditScore > 700) || 
        (age >= 18 && hasGuarantor == true)
    )
    exists(
        Account(
            owner == $customer,
            type == "PREMIUM",
            balance > 10000
        ) and
        CreditCheck(
            customer == $customer,
            score > 750,
            date after "01-Jan-2023"
        )
    )
    not(
        Restriction(
            customer == $customer,
            type in ("CREDIT_HOLD", "ACCOUNT_FREEZE"),
            active == true
        )
    )
then
    // Complex action with multiple bracket levels
    Map<String, List<String>> benefitMap = new HashMap<String, List<String>>() {{
        put("PLATINUM", Arrays.asList("LOUNGE_ACCESS", "PRIORITY_SUPPORT"));
        put("GOLD", Arrays.asList("CASHBACK", "REWARDS"));
    }};
    
    $customer.setTier("PLATINUM");
    
    // Nested method calls with brackets
    benefitMap.get("PLATINUM").forEach(benefit -> {
        insert(new Benefit($customer, benefit));
    });
end

query "findCustomersWithBrackets"(String status, int minAge)
    $customer : Customer(
        status == status,
        age >= minAge,
        accounts.size() > 0
    )
    $account : Account(
        owner == $customer,
        balance > 0,
        transactions.size() > 10
    )
end

declare ComplexEvent
    customer : Customer
    data : Map<String, Object>
    tags : List<String>
    metadata : Map<String, List<String>>
end